// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: volume/volume.proto

package volumev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VolumesClient is the client API for Volumes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VolumesClient interface {
	ListVolumes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VolumeList, error)
	GetVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Volume, error)
}

type volumesClient struct {
	cc grpc.ClientConnInterface
}

func NewVolumesClient(cc grpc.ClientConnInterface) VolumesClient {
	return &volumesClient{cc}
}

func (c *volumesClient) ListVolumes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VolumeList, error) {
	out := new(VolumeList)
	err := c.cc.Invoke(ctx, "/volume.Volumes/ListVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumesClient) GetVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/volume.Volumes/GetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumesServer is the server API for Volumes service.
// All implementations must embed UnimplementedVolumesServer
// for forward compatibility
type VolumesServer interface {
	ListVolumes(context.Context, *emptypb.Empty) (*VolumeList, error)
	GetVolume(context.Context, *VolumeRequest) (*Volume, error)
	mustEmbedUnimplementedVolumesServer()
}

// UnimplementedVolumesServer must be embedded to have forward compatible implementations.
type UnimplementedVolumesServer struct {
}

func (UnimplementedVolumesServer) ListVolumes(context.Context, *emptypb.Empty) (*VolumeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVolumes not implemented")
}
func (UnimplementedVolumesServer) GetVolume(context.Context, *VolumeRequest) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolume not implemented")
}
func (UnimplementedVolumesServer) mustEmbedUnimplementedVolumesServer() {}

// UnsafeVolumesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VolumesServer will
// result in compilation errors.
type UnsafeVolumesServer interface {
	mustEmbedUnimplementedVolumesServer()
}

func RegisterVolumesServer(s grpc.ServiceRegistrar, srv VolumesServer) {
	s.RegisterService(&Volumes_ServiceDesc, srv)
}

func _Volumes_ListVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumesServer).ListVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume.Volumes/ListVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumesServer).ListVolumes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Volumes_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumesServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume.Volumes/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumesServer).GetVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Volumes_ServiceDesc is the grpc.ServiceDesc for Volumes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Volumes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "volume.Volumes",
	HandlerType: (*VolumesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVolumes",
			Handler:    _Volumes_ListVolumes_Handler,
		},
		{
			MethodName: "GetVolume",
			Handler:    _Volumes_GetVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "volume/volume.proto",
}
